use UTbot as knowledge.
use Action as actionspec.
use PickupHealth as module.
use PickupArmor as module.
use PickupHealth as module.
use PickupOther as module.
use PickupWeapon as module.

exit = never.
order = linear.

module hangAroundBase {
		
		%if bel navigating to a place and no path then exit
		if bel(navigation('noPath',UnrealID)) then exit-module.
		if bel(navigation('stuck',_)) then exit-module.
		
		% if you see our dropped flag, then pick it up.
		if bel(droppedFlagAt(Location), navigation(navigation,ID), not(ID=Location)) then stop.
		if bel(droppedFlagAt(Location), not(navigation(navigation,_))) then navigate(Location).
		
		% exit moudule when one of the flagstates has changed.
		if bel(self(_,_,Team), flagState(Team,State), not(State='home')) then exit-module.		
		
		% pick up health on our way
		if bel(status(Health,_), Health < 100,(pickup(UnrealID,'health',_),item(_,_,_,UnrealID)), not(navigation('noPath',UnrealID)), not(navigation('stuck',UnrealID))) then PickupHealth.

		% pick up weapons on our way
		if bel(pickup(UnrealID,'weapon',_), item(_,'weapon',NewWeapon,UnrealID), currentWeapon(CurrentWeapon,_), betterWeapon(NewWeapon,CurrentWeapon), not(weapon(NewWeapon,_,_)), not(navigation('noPath',UnrealID)), not(navigation('stuck',UnrealID))) then PickupWeapon.
		
		% Let the bot go to a module to pick up armor if needed.
		if bel(status(_,Armor), Armor < 80, item(_,'armor',_,_)) then PickupArmor.
		
		% pick up other items
		if bel(item(_,_,_,UnrealID), pickup(UnrealID,'other',O), not(O=invisibility), not(O=jump_boots), not(O=berserk), not(navigation('noPath',UnrealID)), not(navigation('stuck',UnrealID))) then PickupOther.
		
		if bel(closeToOurBaseNavPoint(UnrealID)) then navigate(UnrealID).
}