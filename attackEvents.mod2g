use Knowledge as knowledge.
use Actions as actionspec.

order = linearall.

module attackEvents {
	
	
	%----------------------------------------Percept handeling
	
	% If bot sees enemy bot then look at that direction.
	if bel(enemyBot(_, Location)) then look(Location).
	
	% If we are shot at, turn around and look at where you came from.
	if percept(status(NewHealth, _), status(OldHealth, _), NewHealth < OldHealth, not(enemyBot(_, _)), ownLocation(X, Y, Z))  then look(location(X, Y, Z)).
	
	% Belief base cleaning.
	forall bel(lookingAt(Target)) do delete(lookingAt(Target)).
	 	
	% Updating where to look.
	if bel(not(enemyBot(_, _)), timeForUpdate, lookAt(Location, X), viewAngle(Y), lastAngleUpdater(LastAngle), get_time(Current)) 
		then look([nearestEnemy, Location]) + delete(lastAngleUpdater(LastAngle)) + insert(lastAngleUpdater(Current)) + delete(viewAngle(Y)) + insert(viewAngle(X)).
	
	% Keep track of own location.
	if bel(ownLocation(OldX, OldY, OldZ)), percept(orientation(location(X, Y, Z), _, _)) then delete(ownLocation(OldX, OldY, OldZ))+insert(ownLocation(X, Y, Z)).
		
	% Update the navigation state of the bot ('send on change' percept).
	forall bel(navigation(OldStatus, OldDest)), percept(navigation(Status, Destination))do 
		delete(navigation(OldStatus, OldDest)) + insert(navigation(Status, Destination)).
	
	% Update the bot's status.
	forall bel(status(OldHp, OldArm)), percept(status(Hp, Arm, _, _)) do
		delete(status(OldHp, OldArm)) + insert(status(Hp, Arm)).
		
	% Update the bot's current weapon.
	forall bel(currentWeapon(OldWeap, OldFMode)), percept(currentWeapon(Weap, FMode)) do
		delete(currentWeapon(OldWeap, OldFMode)) + insert(currentWeapon(Weap, FMode)).
		
	% Update the bot's inventory.
	if percept(not(weapon(WeapType, Ammo, AltAmmo))), bel(weapon(WeapType, Ammo, AltAmmo)) then delete(weapon(WeapType, Ammo, AltAmmo)).
	if percept(weapon(WeapType, Ammo, AltAmmo)) then insert(weapon(WeapType, Ammo, AltAmmo)).
		
	% Update the bot's current powerup.
	forall bel(powerup(OldType, OldDur)), percept(powerup(Type, Dur)) do
		delete(powerup(OldType, OldDur)) + insert(powerup(Type, Dur)).
		
	% Update the bot's current armor.
	forall bel(armor(OldHelm, OldVest, OldPads, OldBelt)), percept(armor(Helm, Vest, Pads, Belt)) do
		delete(armor(OldHelm, OldVest, OldPads, OldBelt)) + insert(armor(Helm, Vest, Pads, Belt)).
		
	% Store all kills made in the match.
	forall percept(fragged(Time, KillerID, VictimID, WeapType)) do insert(fragged(Time, KillerID, VictimID, WeapType)).

	% Updates the state of the flag.
	forall percept(not(flagState(Team, FlagState))), bel(flagState(Team, FlagState)) do delete(flagState(Team, FlagState)).
	forall percept(flagState(Team, FlagState)) do insert(flagState(Team, FlagState)).
	
	% Update Flag stuff.
	forall percept(not(flag(Team , HolderID , Position))) do delete(flag(Team , HolderID , Position)).
	forall percept(flag(Team , HolderID , Position)) do insert(flag(Team , HolderID , Position)).	
	
	% Update the items the bot sees and drop any getItem goals associated with them.
	forall percept(not(item(UnrealID, Label, ItemType, Position))), bel(item(UnrealID, Label, ItemType, Position)) do delete(item(UnrealID, Label, ItemType, Position)).
	forall percept(item(UnrealID, Label, ItemType, Position)) do insert(item(UnrealID, Label, ItemType, Position)).
	
	% Update the other bots the bot sees.
	forall percept(not(bot(UnrealID, Name, Team, Position, Weapon, Firemode))), bel(bot(UnrealID, Name, Team, Position, Weapon, Firemode)) do delete(bot(UnrealID, Name, Team, Position, Weapon, Firemode)).
	forall percept(bot(UnrealID, Name, Team, Position, Weapon, Firemode)) do insert(bot(UnrealID, Name, Team, Position, Weapon, Firemode)).
	
	% Update the pickups the bot sees.
	forall percept(not(pickup(UnrealID))), bel(pickup(UnrealID)) do delete(pickup(UnrealID)).
	forall percept(pickup(UnrealID)) do insert(pickup(UnrealID)).
	
	
	
	
	%----------------------------------Goal Handeling---------------------------------------------
	
	
	 	
	% If the flag we want is home then adopt to go to that base.
	if bel(flagState(Team, home), enemyBaseLocation(UnrealID), self(_, _, Team2), Team \= Team2) then adopt(at(UnrealID)).
	 
	% If the bot holds the flag then all 'at' goals are dropped.	
	forall a-goal(at(UnrealID)), bel(holdingFlag, ourBaseLocation(UnrealID2), UnrealID\=UnrealID2) do drop(at(UnrealID)) + navigate(UnrealID2).
		
	% If the bot holds the flag then the bot should navigate to the our base.
	if bel(holdingFlag, ourBaseLocation(Location)) then navigate(Location).
	 	
	% If flag of opponent is already held then drop the goal to be at the enemy base.
	forall a-goal(at(UnrealID)), bel(ourBaseLocation(UnrealID2), enemyBaseLocation(UnrealID), flagState(Team2, held), self(Player, _, Team), Team \= Team2) do drop(at(UnrealID)) + navigate(UnrealID2).
	 	
	% If we are not holding the flag anymore than drop to goal to be at our base.
	if a-goal(at(UnrealID)), bel(ourBaseLocation(UnrealID), self(Player, _, Team), not(flag(Team2, Player, _)), not(Team=Team2)) then drop(at(UnrealID)).
	 	
	% If there is no path to the location the bot is going to, the goal is dropped an the bot is stopped.
	if a-goal(at(UnrealID)), bel(navigation('noPath', UnrealID)) then drop(at(UnrealID)).	
	if bel(navigation('noPath', UnrealID)), not(a-goal(at(UnrealID))) then stop.
	 	
	% Secondary for shock rifle if an enemy bot is closeby, else primary.
	if bel(not(enemyBot(_, _))) then prefer([weapon(shock_rifle, primary), weapon(flak_cannon, primary), weapon(link_gun, primary), weapon(stinger_minigun, primary), weapon(sniper_rifle, primary), weapon(enforcer, primary), weapon(impact_hammer, primary)]).
	if bel(enemyBot(_, location(X, Y, _)), ownLocation(A, B, _), A>X+500, A<X-500, B>Y+500, B<Y-500) then prefer([weapon(shock_rifle, primary), weapon(flak_cannon, primary), weapon(link_gun, primary), weapon(stinger_minigun, primary), weapon(sniper_rifle, primary), weapon(enforcer, primary), weapon(impact_hammer, primary)]).
	if bel(bot(_, _, _, location(X, Y, _), _, _), ownLocation(A, B, _), A<X+500, A>X-500, B<Y+500, B>Y-500) then prefer([weapon(shock_rifle, secondary), weapon(flak_cannon, primary), weapon(link_gun, primary), weapon(stinger_minigun, primary), weapon(sniper_rifle, primary), weapon(enforcer, primary), weapon(impact_hammer, primary)]).
}