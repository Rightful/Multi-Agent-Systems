use UTbot as knowledge.
use Action as actionspec.

order = linearall.

module attackEvents {
	
	
	
	
	
	

	
	if a-goal(attack), bel(not(holdingFlag))then adopt(holdingFlag).
	
	if bel(holdingFlag) then (god).send(holdingFlag).
	

	%If we are holding the flag , send to other bots our location. thus 
	


	% Update the pickups the bot sees.
	forall percept(not(pickup(UnrealID))) do delete(pickup(UnrealID)).
	forall percept(pickup(UnrealID)) do insert(pickup(UnrealID)).

	% if we hold the flag then send to other escort
	if bel(ourBaseLocation(Home), ownLocation(X,Y,Z)) then path(location(X,Y,Z), Home).
	if bel(self(_, _, Color), base(Color, Home), holdingFlag), percept(path(_, Home,_ ,[_,LocationThird|_])) then allother.send:(escorting(LocationThird)).

	% if the flag of the enemy is dropped or at home, then the last location of the flag arent valid
	forall bel(lastKnownLocFlag(Location),(flagState(Team, 'home')), self(_,_,Team2), Team\=Team2) do delete(lastKnownLocFlag(Location)).	
	forall bel(lastKnownLocFlag(Location),(flagState(Team, 'dropped')), self(_,_,Team2), Team\=Team2) do delete(lastKnownLocFlag(Location)).


	% if the Red flag is at home , the adopt the goal to go there.
	if bel(enemyBaseLocation(Location), flagState(Team, 'home'), self(_,_, Team2), Team \= Team2) then adopt(goGrabEnemy(Location)).
	
	% If the flag is back at the base the goLocationFlag goal is dropped
	forall a-goal(goLocationFlag(UnrealID)), bel(self(_,_,TeamColor), not(flagState(TeamColor, 'dropped')))
		do drop(goLocationFlag(UnrealID)).
		
	% If the bot sees the flag, the bot will delete all his next locations and adopt going to the location of the flag.
	if bel(self(_,_,TeamColor), flag(TeamColor, none, Position), flagState(TeamColor, 'dropped'))
		then adopt(goLocationFlag(Position)) + exit-module.

	% If the doesn't hold the enemy flag anymore but still has a goal to bring it home the goals would be dropped
	forall a-goal(goHomeWithFlag(UnrealID)), bel(not(holdingFlag))
		do drop(goHomeWithFlag(UnrealID)).		
	
	% If the bot holds the flag and the friendly flag is not at home then the bot will rotate around the base
	if bel(inRadius(Position), holdingFlag, self(_, _,TeamColor), not(flagState(TeamColor, 'home')))
		then adopt(goHomeWithFlag(Position)) + exit-module.		
	
	% If the bot holds the flag the bot will go home.	
	if bel(ourBaseLocation(Home), holdingFlag)
		then adopt(goHomeWithFlag(Home)) + exit-module.	
	
	% If the bot believes the flag is not held and has a goal of going to a helpLocation the bot will drop the goal
	forall a-goal(goLocationHelp(Position, UnrealID)), bel(self(_,_,TeamColor), not( flagState(TeamColor, 'held')))
		do drop(goLocationHelp(Position, UnrealID)).
	
	% If the bot gets location of helpDef the bot will insert that location.
	if bel(self(_,_,TeamColor), flag(TeamColor, HolderID, Position), flagState(TeamColor, 'held'), 
		navigation(navigating, UnrealID), Position \= UnrealID)		
		then stop + adopt(goLocationHelp(Position, HolderID)) + exit-module.
	
	% If the bot gets location of helpDef the bot will insert that location.
	if bel(self(_,_,TeamColor), flag(TeamColor, HolderID, Position), flagState(TeamColor, 'held'))
		then adopt(goLocationHelp(Position, HolderID)) + exit-module.
	
	% If has a goal of grabbing the enemy flag at that location and the flag is not at that location the bot will drop the goal
	forall a-goal(goLocationFlagEnemy(Position)), bel(self(_,_,TeamColor), not(flag(NotTeamColor, none, Position)), TeamColor \= NotTeamColor)
		do drop(goLocationFlagEnemy(Position)).
		
	% If the bot sees the enemyflag the bot will adopt the goal of grabbing that flag
	forall a-goal(goGrabEnemy(Location)), bel(self(_,_,TeamColor), flag(NotTeamColor, none, Position), TeamColor \= NotTeamColor, navigation(navigating, UnrealID), UnrealID \= Position)
		do stop + drop(goGrabEnemy(Location))+ adopt(goLocationFlagEnemy(Position)) + exit-module.
	
	% If the bot sees the enemyflag the bot will adopt the goal of grabbing that flag	
	forall a-goal(goGrabEnemy(Location)), bel(self(_,_,TeamColor), flag(NotTeamColor, none, Position), TeamColor \= NotTeamColor)
		do  drop(goGrabEnemy(Location))+ adopt(goLocationFlagEnemy(Position)) + exit-module.
	
	% If the flag of the bot is not taken anymore the bot will drop all goRandom places.
	forall a-goal(goRandom(Position)), bel(self(_,_,TeamColor), not(flagState(TeamColor, 'held')))
		do drop(goRandom(Position)).
		
	if bel(atkRad(UnrealID), navigation(navigating, UnrealID), not(flagState(TeamColor, 'held')))
		then stop + exit-module.
	
	forall bel(atkRad(Position), self(_,_,TeamColor), not(flag(TeamColor, _, _)), flagState(TeamColor, 'held')) 
		do adopt(goRandom(Position)) + exit-module.
		
	forall a-goal(goLocationKill(Position, UnrealID)), bel(not(enemyBot(UnrealID, Position)))
		do drop(goLocationKill(Position, UnrealID)).
		
	if bel(enemyBot(UnrealID, Position), navigation(navigating, Position2), Position \= Position2) 
		then stop +  adopt(goLocationKill(Position, UnrealID)) + exit-module.
	
	if bel(enemyBot(UnrealID, Position)) 
		then adopt(goLocationKill(Position, UnrealID)) + exit-module.
	

	% if you have been fragged then delete all (at +  fraggedBot) goals.
	forall a-goal(fraggedBot(A,location(X,Y,Z))), bel(self(Victim,_,_), fragged(_,_,Victim,_)) do drop(fraggedBot(A,location(X,Y,Z))).
	forall a-goal(fraggedBot(A,location(X,Y,Z))), bel(not(enemyBot(A,_))) do drop(fraggedBot(A,location(X,Y,Z))).

	% if you see an opponent bot then adopt to kill that bot.
	 forall bel(enemyBot(UnrealID,location(X,Y,Z))) do adopt(fraggedBot(UnrealID,location(X,Y,Z))).


	forall a-goal(goEscort(LocationThird)), bel(self(_, _, Color), flagState(Color2, 'home'), Color \= Color2)
		do drop(goEscort(LocationThird)) + stop + exit-module.
	
	if (_).sent:(escorting(LocationThird))
		then adopt(goEscort(LocationThird))+ exit-module.
		
		
	forall a-goal(goLocation(Location)), bel(self(_,_,Color), flagState(Color2, 'home'), Color \= Color2)
		do drop(goLocation(Location)).
	
	forall bel(atkRad(Position), self(_,_,Color), flagState(Color2, 'dropped'), Color \= Color2)
		do adopt(goRandom(Position))+ exit-module.
	
}