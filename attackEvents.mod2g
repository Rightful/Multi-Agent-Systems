use UTbot as knowledge.
use Action as actionspec.

order = linearall.

module attackEvents {
	
	% Belief base cleaning.
	forall bel(lookingAt(Target)) do delete(lookingAt(Target)).
	 	
	% Updating where to look.
	if bel(not(enemyBot(_, _)), timeForUpdate, lookAt(LOC, X), viewAngle(Y), lastAngleUpdater(LastAngle), get_time(Current)) 
		then look([nearestEnemy,LOC]) + delete(lastAngleUpdater(LastAngle)) + insert(lastAngleUpdater(Current)) + delete(viewAngle(Y)) + insert(viewAngle(X)).
	
	% if we're shot at but dont see anyone, look at where you came from
	 if percept(status(NewHealth,_)), bel(status(OldHealth,_), NewHealth < OldHealth, not(enemyBot(_,_)), ownLocation(A,B,C))  then look(location(A,B,C)).
	
	% If bot sees enemy bot.
	if bel(enemyBot(_, LOC)) then look(LOC).	
	
	% keep track of own location.
	if bel(ownLocation(OldX,OldY,OldZ)),percept(orientation(location(X,Y,Z),_,_)) then delete(ownLocation(OldX,OldY,OldZ))+insert(ownLocation(X,Y,Z)).
	
	% Update the orientation of the bot
	forall bel(orientation(location(X,Y,Z),OldRot,OldVel), prevLocation(X1,Y1,Z1)), percept(orientation(Loc,Rot,Vel)) do
		delete(prevLocation(X1,Y1,Z1)) + insert(prevLocation(X,Y,Z)) + delete(orientation(location(X,Y,Z),OldRot,OldVel)) + insert(orientation(Loc,Rot,Vel)).
		
	% Update the bot's status
	forall bel(status(OldHp,OldArm)), percept(status(Hp,Arm,_,_)) do
		delete(status(OldHp,OldArm)) + insert(status(Hp,Arm)).
		
	% Update the bot's current weapon
	forall bel(currentWeapon(OldWeap,OldFMode)), percept(currentWeapon(Weap,FMode)) do
		delete(currentWeapon(OldWeap,OldFMode)) + insert(currentWeapon(Weap,FMode)).
		
	% Update the bot's inventory
	if percept(not(weapon(WeapType,Ammo,AltAmmo))), bel(weapon(WeapType,Ammo,AltAmmo)) then delete(weapon(WeapType,Ammo,AltAmmo)).
	if percept(weapon(WeapType,Ammo,AltAmmo)) then insert(weapon(WeapType,Ammo,AltAmmo)).
		
	% Update the bot's current powerup
	forall bel(powerup(OldType,OldDur)), percept(powerup(Type,Dur)) do
		delete(powerup(OldType,OldDur)) + insert(powerup(Type,Dur)).
		
	% Update the bot's current armor
	forall bel(armor(OldHelm,OldVest,OldPads,OldBelt)), percept(armor(Helm,Vest,Pads,Belt)) do
		delete(armor(OldHelm,OldVest,OldPads,OldBelt)) + insert(armor(Helm,Vest,Pads,Belt)).
		
	% Store all kills made in the match
	forall percept(fragged(Time,KillerID,VictimID,WeapType)) do insert(fragged(Time,KillerID,VictimID,WeapType)).
	
	% Update the navigation state of the bot ('send on change' percept).
	forall bel(navigation(OldStatus,OldDest)), percept(navigation(Status,Destination))do 
		delete(navigation(OldStatus,OldDest)) + insert(navigation(Status,Destination)).

	% Updates the state of the flag.
	forall percept(not(flagState(Team,FlagState))) do delete(flagState(Team,FlagState)).
	forall percept(flagState(Team,FlagState)) do insert(flagState(Team,FlagState)).
	
	% Update Flag stuff.
	forall percept(flag(Team , HolderID , Position)) do insert(flag(Team , HolderID , Position)).	
	forall percept(not(flag(Team , HolderID , Position))),bel(flag(Team , HolderID , Position))do delete(flag(Team , HolderID , Position)).
	
	%if percept(flag(Team , HolderID , Position)), not(bel(flag(Team , _ , _)))then insert(flag(Team , HolderID , Position)).

	% Handle the path percept from the path action
	forall percept(path(StartID,EndID,Len,Loc)) do insert(path(StartID,EndID,Len,Loc)).
	
	% Update the items the bot sees and drop any getItem goals associated with them.
	forall percept(not(item(UnrealID,Label,ItemType,Position))) do delete(item(UnrealID,Label,ItemType,Position)) + drop(goLocation(UnrealID)).
	forall percept(item(UnrealID,Label,ItemType,Position)) do insert(item(UnrealID,Label,ItemType,Position)).
	
	% Update the other bots the bot sees.
	forall percept(not(bot(UnrealID,Name,Team,Position,Weapon,Firemode))) do delete(bot(UnrealID,Name,Team,Position,Weapon,Firemode)).
	forall percept(bot(UnrealID,Name,Team,Position,Weapon,Firemode)) do insert(bot(UnrealID,Name,Team,Position,Weapon,Firemode)).
	
	% Update the pickups the bot sees.
	forall percept(not(pickup(UnrealID))) do delete(pickup(UnrealID)).
	forall percept(pickup(UnrealID)) do insert(pickup(UnrealID)).
	
	% Update the slowVolumes the bot sees.
	forall percept(not(slowVolume([UnrealID]))) do delete(slowVolume([UnrealID])).
	forall percept(slowVolume([UnrealID])) do insert(slowVolume([UnrealID])).


	% if we hold the flag then send to other escort
	if bel(holdingFlag) then allother.send:(escort).
	
	% if someone send escort then insert escort
	if (_).sent:(escort), bel(not(holdingFlag)) then insert(escort).


	if bel(flagState(Team, 'dropped'), self(_,_, Team2), Team \= Team2) then delete(escort).
	
	% if the Red flag is at home , the adopt the goal to go there.
	if bel(enemyBaseLocation(Location), flagState(Team, 'home'), self(_,_, Team2), Team \= Team2) then delete(escort) + adopt(goGrabEnemy(Location)).
	
	%if we see the flag , go there.
	if bel(flag(Team,none,Location), self(_,_,Team2), Team\=Team2) then delete(escort) + adopt(goGrabEnemy(Location)) .

	%if we were escorting a person , and our flag was taken , the escort should go in killmodus.
	if  bel(escort, flagState(Team,held), self(_,_,Team)) then delete(escort) + adopt(killModus).
	
	% if the bot holds the flag he cant be the escort
	if bel(flag(Team2,Player,_), self(Player,_,Team), Team \= Team2) then delete(escort).
	
	%If we are holding the flag , send to other bots our location. thus 
	if bel(holdingFlag, ownLocation(X,Y,Z), not(escort)) then allother.send(locationOfFlag(X,Y,Z)).
	
	%if someone sends me the location  I put it in my believe base as lastknownFlagLoc
	if (_).sent(locationOfFlag(X,Y,Z) ), bel(escort)then adopt(goEscort(location(X,Y,Z))).
	
	% if the flag of the enemy is dropped or at home, then the last location of the flag arent valid
	forall bel(lastKnownLocFlag(Location),(flagState(Team, 'home')), self(_,_,Team2), Team\=Team2) do delete(lastKnownLocFlag(Location)).	
	forall bel(lastKnownLocFlag(Location),(flagState(Team, 'dropped')), self(_,_,Team2), Team\=Team2) do delete(lastKnownLocFlag(Location)).

	
	% If we have the flag , go back to base.
	if bel(ourBaseLocation(Home), holdingFlag) then adopt(goHomeWithFlag(Home)).
	
	% Not stable yet
	% forall bel(atkRad(UnrealID), flagState(Team, 'dropped'), self(_,_, Team2), Team \= Team2, not(flag(_,_,_)) ) 
	%	do adopt(goRandom(UnrealID)).
	
	forall a-goal(goGrabEnemy(Location)), bel(holdingFlag) do drop(goGrabEnemy(Location)).
	forall a-goal(goEscort(Location)), bel(holdingFlag) do drop(goEscort(Location)).
	forall a-goal(goRandom(Location)), bel(holdingFlag) do drop(goRandom(Location)).
	
	
	forall a-goal(goEscort(Location)), bel(flag(Team,none,Location); (flagState(Team, 'home'), self(_,_, Team2), Team \= Team2)) 
		do drop(goEscort(Location)).
	forall a-goal(goHomeWithFlag(Home)), bel(flag(Team,none,Location); (flagState(Team, 'home'), self(_,_, Team2), Team \= Team2)) 
		do drop(goHomeWithFlag(Home)).
	forall a-goal(goRandom(Home)), bel(flag(Team,none,Location); (flagState(Team, 'home'), self(_,_, Team2), Team \= Team2)) 
		do drop(goRandom(Home)).
		
	forall a-goal(goHomeWithFlag(Home)), bel(escort) do drop(goHomeWithFlag(Home)).
	forall a-goal(goRandom(Location)), bel(escort) do drop(goRandom(Location)).
	forall a-goal(goGrabEnemy(Location)), bel(escort) do drop(goGrabEnemy(Location)).
	
	


	
	% if you have been fragged then delete all (at +  fraggedBot) goals.
	forall a-goal(fraggedBot(A,location(X,Y,Z))), bel(self(Victim,_,_), fragged(_,_,Victim,_)) do drop(fraggedBot(A,location(X,Y,Z))).
	forall a-goal(fraggedBot(A,location(X,Y,Z))), bel(not(enemyBot(A,_))) do drop(fraggedBot(A,location(X,Y,Z))).

	%if bel(lastKnownLocFlag(POS),flagState(Team, 'home'), self(_,_,Team2), Team\=Team2) then delete(lastKnownLocFlag(POS)).
	
	% if you see an opponent bot then adopt to kill that bot.
	 forall bel(enemyBot(UnrealID,location(X,Y,Z))) do adopt(fraggedBot(UnrealID,location(X,Y,Z))).








	% if flag of opponent is already held then drop the goal to be at the flag base.
	forall a-goal(goGrabEnemy(Location)) , bel(flagState(Team2 , held), self(Player, _, Team), Team \=Team2, not(flag(Team2,Player,_)) ) 
		do drop(goGrabEnemy(Location)).
	

	%drop killModus if our flag is home.
	if a-goal(killModus), bel(flagState(Team, home), self(_,_,Team)) then drop(killModus).		
	
	% If the bot sees an item that is a weapon(but not the bio rifle) or ammo for one, adopt the goal to get it.
	%if bel(item(UnrealID,Label,ItemType,Position)), not(bel(item(UnrealID,Label,bio_rifle,Position))) then adopt(goLocation(UnrealID)).


	% Weet niet of dit het doet aangezien capture the flag module het niet doet
	% If the bot sees the flag, the bot will delete all his next locations and adopt going to the location of the flag.
	forall a-goal(goGrabEnemy(UnrealID)), bel(self(_,_,TeamColor), flag(TeamColor, none, Position), flagState(TeamColor, 'dropped'))
		do drop(goGrabEnemy(UnrealID))+ adopt(goLocationFlag(Position)).
	forall a-goal(goHomeWithFlag(UnrealID)), bel(self(_,_,TeamColor), flag(TeamColor, none, Position), flagState(TeamColor, 'dropped'))
		do drop(goHomeWithFlag(UnrealID))+ adopt(goLocationFlag(Position)).
	forall a-goal(goEscort(UnrealID)), bel(self(_,_,TeamColor), flag(TeamColor, none, Position), flagState(TeamColor, 'dropped'))
		do drop(goEscort(UnrealID))+ adopt(goLocationFlag(Position)).
	
	% If the flag is back at the base the goLocationFlag goal is dropped
	 forall a-goal(goLocationFlag(UnrealID)), bel(self(_,_,TeamColor), flagState(TeamColor, 'home'))do drop(goLocationFlag(UnrealID)).
	
}