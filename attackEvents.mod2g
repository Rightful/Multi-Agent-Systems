use UTbot as knowledge.
use Action as actionspec.

use randomAtkRad as module.
use randomDefRad as module.

order = linearall.

module attackEvents {
	
	% Belief base cleaning.
	forall bel(lookingAt(Target)) do delete(lookingAt(Target)).
	 	
	% Updating where to look.
	%ERUIT
	if bel(not(enemyBot(_, _)), timeForUpdate, lookAt(LOC, X), viewAngle(Y), lastAngleUpdater(LastAngle), get_time(Current)) 
		then look([nearestEnemy,LOC]) + delete(lastAngleUpdater(LastAngle)) + insert(lastAngleUpdater(Current)) + delete(viewAngle(Y)) + insert(viewAngle(X)).
	
	% If bot sees enemy bot.
	if bel(enemyBot(_, LOC)) then look(LOC).
	
	%if we're shot at but dont see anyone and you're not holding a flag, look at where you came from
	if percept(status(NewHealth,_),status(OldHealth,_), NewHealth < OldHealth, not(enemyBot(_,_)), ownLocation(A,B,C))  then look(location(A,B,C)).

	% keep track of own location.
	if bel(ownLocation(OldX,OldY,OldZ)),percept(orientation(location(X,Y,Z),_,_)) then delete(ownLocation(OldX,OldY,OldZ))+insert(ownLocation(X,Y,Z)).
		
	% Update the navigation state of the bot ('send on change' percept).
	forall bel(navigation(OldStatus,OldDest)), percept(navigation(Status,Destination))do 
		delete(navigation(OldStatus,OldDest)) + insert(navigation(Status,Destination)).
	
	% Update the bot's status
	forall bel(status(OldHp,OldArm)), percept(status(Hp,Arm,_,_)) do
		delete(status(OldHp,OldArm)) + insert(status(Hp,Arm)).
		
	% Update the bot's current weapon
	forall bel(currentWeapon(OldWeap,OldFMode)), percept(currentWeapon(Weap,FMode)) do
		delete(currentWeapon(OldWeap,OldFMode)) + insert(currentWeapon(Weap,FMode)).
		
	% Update the bot's inventory
	if percept(not(weapon(WeapType,Ammo,AltAmmo))), bel(weapon(WeapType,Ammo,AltAmmo)) then delete(weapon(WeapType,Ammo,AltAmmo)).
	if percept(weapon(WeapType,Ammo,AltAmmo)) then insert(weapon(WeapType,Ammo,AltAmmo)).
		
	% Update the bot's current powerup
	forall bel(powerup(OldType,OldDur)), percept(powerup(Type,Dur)) do
		delete(powerup(OldType,OldDur)) + insert(powerup(Type,Dur)).
		
	% Update the bot's current armor
	forall bel(armor(OldHelm,OldVest,OldPads,OldBelt)), percept(armor(Helm,Vest,Pads,Belt)) do
		delete(armor(OldHelm,OldVest,OldPads,OldBelt)) + insert(armor(Helm,Vest,Pads,Belt)).
		
	% Store all kills made in the match
	forall percept(fragged(Time,KillerID,VictimID,WeapType)) do insert(fragged(Time,KillerID,VictimID,WeapType)).

	% Updates the state of the flag.
	forall percept(not(flagState(Team,FlagState))), bel(flagState(Team,FlagState)) do delete(flagState(Team,FlagState)).
	forall percept(flagState(Team,FlagState)) do insert(flagState(Team,FlagState)).
	
	% Update Flag stuff.
	forall percept(not(flag(Team , HolderID , Position))) do delete(flag(Team , HolderID , Position)).
	forall percept(flag(Team , HolderID , Position)) do insert(flag(Team , HolderID , Position)).	
	
	% Update the items the bot sees and drop any getItem goals associated with them.
	forall percept(not(item(UnrealID,Label,ItemType,Position))), bel(item(UnrealID,Label,ItemType,Position)) do delete(item(UnrealID,Label,ItemType,Position)).
	forall percept(item(UnrealID,Label,ItemType,Position)) do insert(item(UnrealID,Label,ItemType,Position)).
	
	% Update the other bots the bot sees.
	forall percept(not(bot(UnrealID,Name,Team,Position,Weapon,Firemode))), bel(bot(UnrealID,Name,Team,Position,Weapon,Firemode)) do delete(bot(UnrealID,Name,Team,Position,Weapon,Firemode)).
	forall percept(bot(UnrealID,Name,Team,Position,Weapon,Firemode)) do insert(bot(UnrealID,Name,Team,Position,Weapon,Firemode)).
	
	% Update the pickups the bot sees.
	forall percept(not(pickup(UnrealID))), bel(pickup(UnrealID)) do delete(pickup(UnrealID)).
	forall percept(pickup(UnrealID)) do insert(pickup(UnrealID)).

	% ----------------------------Goal Management.---------------------------- %
		% if you have been fragged then delete all (at +  fraggedBot) goals.
		forall a-goal(fraggedBot(A)), bel(self(Victim,_,_), fragged(_,_,Victim,_)) do drop(fraggedBot(A)).
		
		% handle fragged percept (After line above!!).
		forall bel(fragged(Time, KillerID, VictimID, WeaponType)) do delete(fragged(Time, KillerID, VictimID, WeaponType)).
		
		% if you see an opponent bot then adopt to kill that bot.
	 	forall bel(enemyBot(UnrealID,_)) do adopt(fraggedBot(UnrealID)).
	 	
		% if the flag you want is home then adopt to go to that base.
	 	if bel(flagState(Team,'home'), enemyBaseLocation(ID), self(_,_,Team2), Team \= Team2) then adopt(at(ID)).
	 	
	 	forall a-goal(at(ID)),bel(holdingFlag,ourBaseLocation(ID2), ID\=ID2) do drop(at(ID)) + navigate(ID2).
	 	
	 	if bel(holdingFlag, ourBaseLocation(LOC)) then navigate(LOC).
	 	
	 	% if flag of opponent is already held then drop the goal to be at the flag base.
	 	forall a-goal(at(ID)), bel(ourBaseLocation(ID2), enemyBaseLocation(ID), flagState(Team2,'held'), self(Player,_,Team), Team \= Team2) do drop(at(ID)) + navigate(ID2).
	 	
	 	% if you are not holding the flag anymore than drop to goal to be at our base.
	 	if a-goal(at(ID)), bel(ourBaseLocation(ID), self(Player,_,Team), not(flag(Team2,Player,_)), not(Team=Team2)) then drop(at(ID)).
	 	
		% if no path then ...
		if a-goal(at(ID)), bel(navigation('noPath',ID)) then drop(at(ID)).
		if bel(navigation('noPath',ID)), not(a-goal(at(ID))) then stop.
	 	
		% secondary for shock rifle if an enemy bot is closeby, else primary
		if bel(not(enemyBot(_,_))) then prefer([weapon(shock_rifle,primary),weapon(flak_cannon,primary),weapon(link_gun,primary),weapon(stinger_minigun,primary),weapon(sniper_rifle,primary),weapon(enforcer,primary),weapon(impact_hammer,primary)]).
		if bel(enemyBot(_,location(X,Y,_)), ownLocation(A,B,_), A>X+500, A<X-500, B>Y+500, B<Y-500) then prefer([weapon(shock_rifle,primary),weapon(flak_cannon,primary),weapon(link_gun,primary),weapon(stinger_minigun,primary),weapon(sniper_rifle,primary),weapon(enforcer,primary),weapon(impact_hammer,primary)]).
		if bel(bot(_,_,_,location(X,Y,_),_,_), ownLocation(A,B,_), A<X+500, A>X-500, B<Y+500, B>Y-500) then prefer([weapon(shock_rifle,secondary),weapon(flak_cannon,primary),weapon(link_gun,primary),weapon(stinger_minigun,primary),weapon(sniper_rifle,primary),weapon(enforcer,primary),weapon(impact_hammer,primary)]).
}