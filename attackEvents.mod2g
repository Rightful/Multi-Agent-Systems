use UTbot as knowledge.

order = linearall.

module attackEvents {
	
	% Update the orientation of the bot
	forall bel(orientation(location(X,Y,Z),OldRot,OldVel), prevLocation(X1,Y1,Z1)), percept(orientation(Loc,Rot,Vel)) do
		delete(prevLocation(X1,Y1,Z1)) + insert(prevLocation(X,Y,Z)) + delete(orientation(location(X,Y,Z),OldRot,OldVel)) + insert(orientation(Loc,Rot,Vel)).
		
	% Update the bot's status
	forall bel(status(OldHp,OldArm)), percept(status(Hp,Arm,_,_)) do
		delete(status(OldHp,OldArm)) + insert(status(Hp,Arm)).
		
	% Update the bot's score
	forall bel(score(OldK,OldD,OldS)), percept(score(K,D,S)) do
		delete(score(OldK,OldD,OldS)) + insert(score(K,D,S)).
		
	% Update the bot's current weapon
	forall bel(currentWeapon(OldWeap,OldFMode)), percept(currentWeapon(Weap,FMode)) do
		delete(currentWeapon(OldWeap,OldFMode)) + insert(currentWeapon(Weap,FMode)).
		
	% Update the bot's inventory
	if percept(not(weapon(WeapType,Ammo,AltAmmo))), bel(weapon(WeapType,Ammo,AltAmmo)) then delete(weapon(WeapType,Ammo,AltAmmo)).
	if percept(weapon(WeapType,Ammo,AltAmmo)) then insert(weapon(WeapType,Ammo,AltAmmo)).
		
	% Update the bot's current powerup
	forall bel(powerup(OldType,OldDur)), percept(powerup(Type,Dur)) do
		delete(powerup(OldType,OldDur)) + insert(powerup(Type,Dur)).
		
	% Update the bot's current armor
	forall bel(armor(OldHelm,OldVest,OldPads,OldBelt)), percept(armor(Helm,Vest,Pads,Belt)) do
		delete(armor(OldHelm,OldVest,OldPads,OldBelt)) + insert(armor(Helm,Vest,Pads,Belt)).
		
	% Store all kills made in the match
	forall percept(fragged(Time,KillerID,VictimID,WeapType)) do insert(fragged(Time,KillerID,VictimID,WeapType)).
	
	% Update the navigation state of the bot ('send on change' percept).
	forall bel(navigation(OldStatus,OldDest)), percept(navigation(Status,Destination))do 
		delete(navigation(OldStatus,OldDest)) + insert(navigation(Status,Destination)).

	% Updates the state of the flag.
	if percept(not(flagState(Team,FlagState))) then delete(flagState(Team,FlagState)).
	if percept(flagState(Team,FlagState)) then insert(flagState(Team,FlagState)).
	
	% Update Flag stuff.
	if percept(flag(Team , HolderID , Position)),  bel(flag(Team , OldHolderID , OldPosition)) then
	delete(flag(Team , OldHolderID , OldPosition))+insert(flag(Team , HolderID , Position)).
	
	if percept(flag(Team , HolderID , Position)), not(bel(flag(Team , _ , _)))then insert(flag(Team , HolderID , Position)).

	% Handle the path percept from the path action
	forall percept(path(StartID,EndID,Len,Loc)) do insert(path(StartID,EndID,Len,Loc)).
		
	% Update the logic iteration, currently not used
	forall bel(logic(OldIt)), percept(logic(It)) do delete(logic(OldIt)) + insert(logic(It)).
	
	% Update the information on the current game.
	forall bel(game(OldGType,OldMap,OldGScore,OldTLimit)), percept(game(GType,Map,GScore,TLimit)) do
		delete(game(OldGType,OldMap,OldGScore,OldTLimit)) + insert(game(GType,Map,GScore,TLimit)).
		
	% Update the scores of both teams.
	forall bel(teamScore(OldTeam,OldOpp)), percept(teamScore(Team,Opp)) do
		delete(teamScore(OldTeam,OldOpp)) + insert(teamScore(Team,Opp)).
	
	% Update the items the bot sees and drop any getItem goals associated with them.
	forall percept(not(item(UnrealID,Label,ItemType,Position))) do delete(item(UnrealID,Label,ItemType,Position)) + drop(goLocation(UnrealID)).
	forall percept(item(UnrealID,Label,ItemType,Position)) do insert(item(UnrealID,Label,ItemType,Position)).
	
	% Update the other bots the bot sees.
	forall percept(not(bot(UnrealID,Name,Team,Position,Weapon,Firemode))) do delete(bot(UnrealID,Name,Team,Position,Weapon,Firemode)).
	forall percept(bot(UnrealID,Name,Team,Position,Weapon,Firemode)) do insert(bot(UnrealID,Name,Team,Position,Weapon,Firemode)).
	
	% Update the pickups the bot sees.
	forall percept(not(pickup(UnrealID))) do delete(pickup(UnrealID)).
	forall percept(pickup(UnrealID)) do insert(pickup(UnrealID)).
	
	% Update the slowVolumes the bot sees.
	forall percept(not(slowVolume([UnrealID]))) do delete(slowVolume([UnrealID])).
	forall percept(slowVolume([UnrealID])) do insert(slowVolume([UnrealID])).
	
	% if the Red flag is at home , the adopt the goal to go there.
	if not(a-goal(escort)), bel(enemyBaseLocation(Location), flagState(Team, 'home'), self(_,_, Team2), (Team \= Team2)) then adopt(at(Location)).
	
	% if flag of opponent is already held then drop the goal to be at the flag base.
	forall a-goal(at(ID)) , bel(enemyBaseLocation(ID), flagState(Team2 , held), self(Player, _, Team), Team \=Team2, not(flag(Team2,Player,_)) ) do drop(at(ID)) +adopt(escort).
	
	%if we see the flag , go there.
	if bel( flag(Team,[],POS) , self(_,_,Team2), Team\=Team2) then adopt(at(POS)).
	
	% If we have the flag , go back to base.
	if bel(ourBaseLocation(Home), holdingFlag) then adopt(at(Home)).
	
	%if we  have the location of a flag from a fragged teammate go to there.
	if bel (not(flag(_,_,_)) , lastKnownLocFlag(Pos)) then adopt (at(Pos)).
	
	%if we have succesfully delivered the flag , or when they recapture it. Drop the escort goal.
	if a-goal(escort),bel(flagState(Team,home),self(_,_,Team2), Team \= Team2) then drop(escort).
	
	%go to the location of the flag carrier. 
	if a-goal(escort), bel(flag(Team , HolderID, Pos),bot(HolderID,_,Team2, Pos,_,_), self(_,_,Team2), Team \= Team2)then adopt(at(Pos)).

	%if we are a escort and we see the enemy flag , go pick it up (Happens when the flag carrier dies)
	if a-goal(escort), bel(flag(Team , [], Pos), self(_,_,Team2), Team \= Team2)then adopt(at(Pos))+drop(escort).
	
	%if we were escorting a person , and ours flag was taken , the escort should go in killmodus.
	if a-goal(escort), bel(flagState(Team2,held),flagState(Team,held),self(_,_,Team), Team\=Team2) then adopt(killModus)+drop(escort).		
	
	%if bel(not(holdingFlag), flagState(Team2 , held), self(Player, _, Team), Team \=Team2) then adopt(pickup).
	% if you are not holding the flag anymore than drop to goal to be at our base.
	if a-goal(at(ID)), bel(ourBaseLocation(ID), self(Player,_,Team), not(flag(Team2,Player,_)), not(Team=Team2)) then drop(at(ID)).
	 	
	%if we die send a message to other bots that we died and that the lastknown location is at this position.
	if percept(fragged(_, _, ID, _)), bel(self(ID,_,Team2), flag(Team,ID, Pos), Team\=Team2)then allother.send(lastKnownLocFlag(Pos)).
	if (_).sent(lastKnownLocFlag(Pos))then insert(lastKnownLocFlag(Pos)).
	
	if bel(lastKnownLocFlag(POS),flagState(Team, 'home'), self(_,_,Team2), Team\=Team2) then delete(lastKnownLocFlag(POS)).
	
	% if you see an opponent bot then adopt to kill that bot.
	 forall bel(enemyBot(UnrealID,_)) do adopt(fraggedBot(UnrealID)).
		
	% If the bot sees an item that is a weapon(but not the bio rifle) or ammo for one, adopt the goal to get it.
	%if bel(item(UnrealID,Label,ItemType,Position)), not(bel(item(UnrealID,Label,bio_rifle,Position))) then adopt(goLocation(UnrealID)).
	
}