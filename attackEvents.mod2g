use UTbot as knowledge.
use Action as actionspec.

use atkEHome as module.
use atkDeliver as module.
use atkDrop as module.
use atkEscort as module.
use atkRandom as module.

use pickWeapon as module.
use pickHealth as module.

order = linearall.

module attackEvents {
	
	% keep track of own location.
	if bel(ownLocation(OldX,OldY,OldZ)),percept(orientation(location(X,Y,Z),_,_)) then delete(ownLocation(OldX,OldY,OldZ))+insert(ownLocation(X,Y,Z)).
	
	% Update the orientation of the bot
	forall bel(orientation(location(X,Y,Z),OldRot,OldVel), prevLocation(X1,Y1,Z1)), percept(orientation(Loc,Rot,Vel)) do
		delete(prevLocation(X1,Y1,Z1)) + insert(prevLocation(X,Y,Z)) + delete(orientation(location(X,Y,Z),OldRot,OldVel)) + insert(orientation(Loc,Rot,Vel)).
		
	% Update the bot's status
	forall bel(status(OldHp,OldArm)), percept(status(Hp,Arm,_,_)) do
		delete(status(OldHp,OldArm)) + insert(status(Hp,Arm)).
		
	% Update the bot's current weapon
	forall bel(currentWeapon(OldWeap,OldFMode)), percept(currentWeapon(Weap,FMode)) do
		delete(currentWeapon(OldWeap,OldFMode)) + insert(currentWeapon(Weap,FMode)).
		
	% Update the bot's inventory
	if percept(not(weapon(WeapType,Ammo,AltAmmo))), bel(weapon(WeapType,Ammo,AltAmmo)) then delete(weapon(WeapType,Ammo,AltAmmo)).
	if percept(weapon(WeapType,Ammo,AltAmmo)) then insert(weapon(WeapType,Ammo,AltAmmo)).
		
	% Update the bot's current powerup
	forall bel(powerup(OldType,OldDur)), percept(powerup(Type,Dur)) do
		delete(powerup(OldType,OldDur)) + insert(powerup(Type,Dur)).
		
	% Update the bot's current armor
	forall bel(armor(OldHelm,OldVest,OldPads,OldBelt)), percept(armor(Helm,Vest,Pads,Belt)) do
		delete(armor(OldHelm,OldVest,OldPads,OldBelt)) + insert(armor(Helm,Vest,Pads,Belt)).
		
	% Store all kills made in the match
	forall percept(fragged(Time,KillerID,VictimID,WeapType)) do insert(fragged(Time,KillerID,VictimID,WeapType)).
	
	% Update the navigation state of the bot ('send on change' percept).
	forall bel(navigation(OldStatus,OldDest)), percept(navigation(Status,Destination))do 
		delete(navigation(OldStatus,OldDest)) + insert(navigation(Status,Destination)).

	% Updates the state of the flag.
	forall percept(not(flagState(Team,FlagState))) do delete(flagState(Team,FlagState)).
	forall percept(flagState(Team,FlagState)) do insert(flagState(Team,FlagState)).
	
	% Update Flag stuff.
	forall percept(flag(Team , HolderID , Position)) do insert(flag(Team , HolderID , Position)).	
	forall percept(not(flag(Team , HolderID , Position))),bel(flag(Team , HolderID , Position))do delete(flag(Team , HolderID , Position)).
	
	%if percept(flag(Team , HolderID , Position)), not(bel(flag(Team , _ , _)))then insert(flag(Team , HolderID , Position)).

	% Update the items the bot sees and drop any getItem goals associated with them.
	forall percept(not(item(UnrealID,Label,ItemType,Position))) do delete(item(UnrealID,Label,ItemType,Position)) + drop(goLocation(UnrealID)).
	forall percept(item(UnrealID,Label,ItemType,Position)) do insert(item(UnrealID,Label,ItemType,Position)).
	
	% Update the other bots the bot sees.
	forall percept(not(bot(UnrealID,Name,Team,Position,Weapon,Firemode))) do delete(bot(UnrealID,Name,Team,Position,Weapon,Firemode)).
	forall percept(bot(UnrealID,Name,Team,Position,Weapon,Firemode)) do insert(bot(UnrealID,Name,Team,Position,Weapon,Firemode)).
	
	% Update the pickups the bot sees.
	forall percept(not(pickup(UnrealID))) do delete(pickup(UnrealID)).
	forall percept(pickup(UnrealID)) do insert(pickup(UnrealID)).

	forall bel(temp(X), flagState(_, 'home')) do delete(temp(X)).
	% if we hold the flag then send to other escort
	if bel(ourBaseLocation(Home), ownLocation(X,Y,Z), holdingFlag) then path(location(X,Y,Z), Home).
	if bel(self(_, _, Color), base(Color, Home), holdingFlag), percept(path(_, Home,_ ,[_,LocationThird|_])) then allother.send:(escorting(LocationThird)).

	forall a-goal(goHealth(Position, Health)), bel(status(NewHealth, _), Health \= NewHealth) do drop(goHealth(Position, Health)).
	
	forall a-goal(goItem(Position, OtherWeapon)), percept(weapon(OtherWeapon, _, _)) do drop(goItem(Position, OtherWeapon)).
	
	
	if percept(item(_, 'health', Type, UnrealID), pickup(UnrealID)) then pickHealth.
	
	if bel(flag(Color, none, _), flagState(Color, 'dropped'), Color \= none) then atkDrop + exit-module.
	
	if bel(holdingFlag) then atkDeliver + exit-module.
	
	if percept(item(_, 'weapon', Weapon, UnrealID), pickup(UnrealID)), bel(not(weapon(Weapon, _, _))) then pickWeapon + exit-module.
	
	if bel(self(_, _, Color), flagState(Color2, 'home'), Color\=Color2) then atkEHome + exit-module.
	
	if percept(item(_, 'ammo', Weapon, UnrealID), pickup(UnrealID)), bel(weapon(Weapon, _, Ammo), Ammo < 5) then pickWeapon + exit-module.
	
	
	if bel(self(_, _, Color), flagState(Color2, 'held'), Color \=Color2) then atkEscort + exit-module.
	
	if bel(self(_, _, Color), flagState(Color2, 'dropped'), Color \=Color2) then atkRandom + exit-module.
	
	
	
}