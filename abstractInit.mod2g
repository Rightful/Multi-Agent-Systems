use Knowledge as knowledge.
use Actions as actionspec.

order = linearall.

module abstractInit {
	
	% Store all flag bases on the map.
	forall percept(base(Team, UnrealID)) do insert(base(Team, UnrealID)).
	
	% Store all navpoints on the map.
	forall percept(navPoint(UnrealID, Position, NeighsUnrealID)) do insert(navPoint(UnrealID, Position, NeighsUnrealID)).
	
	% Store all pickups on the map.
	forall percept(pickup(UnrealID, Label, ItemType)) do insert(pickup(UnrealID, Label, ItemType)).
	
	% Store information about the bot.
	forall percept(self(UnrealID, Name, Team)) do insert(self(UnrealID, Name, Team)).
	
	% Store information about the flag state.
	forall percept(flagState(Team, Status)) do insert(flagState(Team, Status)).
	
	% Store information about the flag.
	forall percept(flag(Team, HolderUnrealID, Position)) do insert(flag(Team, HolderUnrealID, Position)).
	
	% Save coördinates for our base.
	if percept(navPoint(BaseUnrealID, Location, _)), bel(
		self(_, _, Team),
		base(Team, BaseUnrealID)
	) then insert(ourBaseLocation(Location)).
	
	% Save coördinates for enemy base.
	if percept(navPoint(BaseUnrealID, Location, _)), bel(
		self(_, _, Team),
		base(Team2, BaseUnrealID),
		Team\=Team2
	) then insert(enemyBaseLocation(Location)).
		
	% Save all nav points close to our base.
	forall percept(navPoint(UnrealID, location(X, Y, Z), _)), bel(
			ourBaseLocation(location(A, B, C)),
			A<X+400, 
			A>X-400, 
			B<Y+400, 
			B>Y-400,
			C<Z+100,
			C>Z-400
		) do insert (closeToOurBaseNavPoint(UnrealID)).
	
	% Save all nav points close to enemy base.
	forall percept(navPoint(UnrealID, location(X, Y, Z), _)), bel(
			enemyBaseLocation(location(A, B, C)),
			A<X+250, 
			A>X-250, 
			B<Y+250, 
			B>Y-250,
			C<Z+100,
			C>Z-400
		) do insert (closeToEnemyBaseNavPoint(UnrealID)).
		
	% Initially, we have no armor.
	if true then insert(armor(none, none, none, none)).
	
	% Initially, we have no weapon equipped.
	if true then insert(currentWeapon(none, none)).

	% Set that we ought to look at the nearest enemy.
	if true then look([enemyFlagCarrier, nearestEnemy]).
		
	% Set general shoot priority.
	if true then shoot([enemyFlagCarrier, nearestEnemy]).
		
	% Initially, we are going nowhere.
	if true then insert(navigation(none, none)).

	% Initially, we are nowhere.
	if true then insert(orientation(location(none, none, none), rotation(none, none, none), velocity(none, none, none))).
	
	% Initially, we have no powerup.
	if true then insert(powerup(none, none)).
	
	% Initially, we have neither hp nor armor.
	if true then insert(status(none, none)).
	
	% Initially, our inventory is empty.
	if true then insert(weapon(none, none, none)).
	
	% Angle horizontal and vertical.
	if true then insert(viewAngle(0)).
		
	% Needs to be set so we can interleave between updates.
	if true then insert(lastAngleUpdater(0)).
	
	% Own location.
	if true then insert(ownLocation(0, 0, 0)).
	
	% angle(Angle, Sinus, CoSinus).
	if true then insert(angle(0, 	0, 			1)).
	if true then insert(angle(30, 	0.5, 		0.866)).
	if true then insert(angle(60, 	0.866, 		0.5)).
	if true then insert(angle(90, 	1, 			0)).
	if true then insert(angle(120, 	0.866, 		-0.5)).
	if true then insert(angle(150, 	0.5, 		-0.866)).
	if true then insert(angle(180, 	0, 			-1)).
	if true then insert(angle(210, 	-0.5, 		-0.866)).
	if true then insert(angle(240, 	-0.866, 	-0.5)).
	if true then insert(angle(270, 	-1, 		0)).
	if true then insert(angle(300, 	-0.866, 	0.5)).
	if true then insert(angle(330, 	-0.5, 		0.866)).
}