use UTbot as knowledge.
use Action as actionspec.
use PickupArmor as module.
use PickupHealth as module.
use PickupOther as module.
use selectWeapon as module.


module defenceMain {
	% TEST: new def PickupSystem
	
	if bel(status(_,Armor), Armor < 80, item(_,'armor',_,_)) then PickupArmor.
	if bel(status(Health,_), Health < 100,(pickup(UnrealID,'health',_),item(_,_,_,UnrealID)), not(navigation('noPath',_)), not(navigation('stuck',_))) then PickupHealth.
	
	if a-goal(fraggedBot(UnrealID,location(X,Y,Z))), not(bel(weaponSelected)) then selectWeapon.

	if a-goal(fraggedBot(UnrealID,location(X,Y,Z))), bel(weaponSelected) then delete(weaponSelected) + shoot(UnrealID).
	
	if bel(item(_,'other',O,UnrealID), not(holdingFlag), not(O=invisibility), not(O=jump_boots), not(O=berserk), not(navigation('noPath',_)), not(navigation('stuck',_))) then stop + PickupOther.
		
	if goal(goLocationFlag(UnrealID)) then drop(goLocationFlag(UnrealID)) + navigate(UnrealID).
		
	if goal(goHomeWithFlag(UnrealID)) then drop(goHomeWithFlag(UnrealID)) + navigate(UnrealID).
		
	if goal(goLocationHelp(UnrealID)) then drop(goLocationHelp(UnrealID)) + navigate(UnrealID).
	
	if goal(goLocationFlagEnemy(UnrealID)) then drop(goLocationFlagEnemy(UnrealID)) + navigate(UnrealID).
	
	if goal(goRandom(UnrealID)) then drop(goRandom(UnrealID)) + navigate(UnrealID).
	
	if goal(goLocation(UnrealID)) then drop(goLocation(UnrealID)) + navigate(UnrealID).
	
	
}