use UTbot as knowledge.
use Action as actionspec.
exit = never.
order = linearall.

module defDeliver {
	
	if bel(not(holdingFlag)) then exit-module.
	
	if a-goal(goHealth(Position, H)) then exit-module.
	if a-goal(goArmor(Position, A)) then exit-module.
	
	if bel( base(Color2, Enemy), flag(Color, HolderID, _),self(_, _, Color), bot(HolderID, _, Color2,Position, _, _), Color \= Color2)
		then path(Position, Enemy) + shoot(HolderID).
				
	if percept( path(_, Enemy, _, [ H1 | [ H2 | [ H | T ] ] ] )), bel(navigation(navigating, Friendly), base(Color, Friendly), base(Color2, Enemy), self(_, _, Color), Color2 \= Color  )
		then stop +  adopt( goLocation(H)) + exit-module.	
	
	if percept( path(Position, Enemy, _, [ H1 | [ H2 | [ H | T ] ] ] )), bel( base(Color, Enemy), self(_, _, Color2) , Color \= Color2)
		then adopt( goLocation(H)) + exit-module.
		
	
		
	if bel( self(_, _, Color), flagState(Color, 'home'), base(Color, Base), navigation(navigating, Position), Postion \= Base) 
		then stop + adopt(goLocation(Base)) + exit-module.
		
	if bel( self(_, _, Color), flagState(Color, 'home'), base(Color, Base)) then adopt(goLocation(Base)) + exit-module.


	if bel( base(Color, Friendly), self(_, _, Color), bot(HolderID, _, Color2,Position, _, _) , Color \= Color2)
		then path(Position, Friendly) + shoot(HolderID).	
	
	if percept( path(_, Friendly, _, [ H1 | [ H2 | [ H | T ] ] ] )), bel(navigation(navigating, Friendly),base(Color, Friendly), self(_, _, Color))
		then stop +  adopt( goLocation(H)) + exit-module.
		
	if percept( path(_, Friendly, _, [ H1 | [ H2 | [ H | T ] ] ] )), bel( base(Color, Friendly), self(_, _, Color))
		then adopt( goLocation(H)) + exit-module.
		
		
	if bel( defRad(Position), self(_, _, Color), flagState(Color, 'dropped'), not(temp(Position))) then insert(temp(Position)) + adopt(goLocation(Position)).
	if bel( defRad(Position), self(_, _, Color), flagState(Color, 'held'), not(temp(Position))) then insert(temp(Position)) + adopt(goLocation(Position)).
	
	


	if true then exit-module.
	
}