use UTbot as knowledge.
use Action as actionspec.
order = linearall.

module defenceEvents {
	
	% Belief base cleaning.
	forall bel(lookingAt(Target)) do delete(lookingAt(Target)).
	 	
	% Updating where to look.
	if bel(not(enemyBot(_, _)), timeForUpdate, lookAt(LOC, X), viewAngle(Y), lastAngleUpdater(LastAngle), get_time(Current)) 
		then look([nearestEnemy,LOC]) + delete(lastAngleUpdater(LastAngle)) + insert(lastAngleUpdater(Current)) + delete(viewAngle(Y)) + insert(viewAngle(X)).
	
	% if we're shot at but dont see anyone, look at where you came from
	if percept(status(NewHealth,_)), bel(status(OldHealth,_), NewHealth < OldHealth, not(enemyBot(_,_)), ownLocation(A,B,C))  then look(location(A,B,C)).
	
	% If bot sees enemy bot.
	if bel(enemyBot(_, LOC)) then look(LOC).	
	
	% keep track of own location.
	if bel(ownLocation(OldX,OldY,OldZ)),percept(orientation(location(X,Y,Z),_,_)) then delete(ownLocation(OldX,OldY,OldZ))+insert(ownLocation(X,Y,Z)).
	
	% Update the orientation of the bot
	forall bel(orientation(location(X,Y,Z),OldRot,OldVel), prevLocation(X1,Y1,Z1)), percept(orientation(Loc,Rot,Vel)) do
		delete(prevLocation(X1,Y1,Z1)) + insert(prevLocation(X,Y,Z)) + delete(orientation(location(X,Y,Z),OldRot,OldVel)) + insert(orientation(Loc,Rot,Vel)).
		
	% Update the bot's status
	forall bel(status(OldHp,OldArm)), percept(status(Hp,Arm,_,_)) do
		delete(status(OldHp,OldArm)) + insert(status(Hp,Arm)).
		
	% Update the bot's current weapon
	forall bel(currentWeapon(OldWeap,OldFMode)), percept(currentWeapon(Weap,FMode)) do
		delete(currentWeapon(OldWeap,OldFMode)) + insert(currentWeapon(Weap,FMode)).
		
	% Update the bot's inventory
	if percept(not(weapon(WeapType,Ammo,AltAmmo))), bel(weapon(WeapType,Ammo,AltAmmo)) then delete(weapon(WeapType,Ammo,AltAmmo)).
	if percept(weapon(WeapType,Ammo,AltAmmo)) then insert(weapon(WeapType,Ammo,AltAmmo)).
		
	% Update the bot's current powerup
	forall bel(powerup(OldType,OldDur)), percept(powerup(Type,Dur)) do
		delete(powerup(OldType,OldDur)) + insert(powerup(Type,Dur)).
		
	% Update the bot's current armor
	forall bel(armor(OldHelm,OldVest,OldPads,OldBelt)), percept(armor(Helm,Vest,Pads,Belt)) do
		delete(armor(OldHelm,OldVest,OldPads,OldBelt)) + insert(armor(Helm,Vest,Pads,Belt)).
		
	% Store all kills made in the match
	forall percept(fragged(Time,KillerID,VictimID,WeapType)) do insert(fragged(Time,KillerID,VictimID,WeapType)).
	
	% Update the navigation state of the bot ('send on change' percept).
	forall bel(navigation(OldStatus,OldDest)), percept(navigation(Status,Destination))do 
		delete(navigation(OldStatus,OldDest)) + insert(navigation(Status,Destination)).
		
	%Update Flag stuff.
	forall bel(flag(Team , HolderID , Position)),  percept(not(flag(Team , HolderID , Position)))
		do delete(flag(Team , HolderID , Position)).
		
	forall percept(flag(Team , HolderID , Position)) do insert(flag(Team , HolderID , Position)).


	forall bel(flagState(Team, Status)),  percept(not(flagState(Team, Status)))
		do delete(flagState(Team, Status)).
		
	forall percept(flagState(Team, Status)) do insert(flagState(Team, Status)).

	% Handle the path percept from the path action
	forall percept(path(StartID,EndID,Len,Loc)) do insert(path(StartID,EndID,Len,Loc)).
		
	% Update the items the bot sees and drop any getItem goals associated with them.
	forall percept(not(item(UnrealID,Label,ItemType,Position))) do delete(item(UnrealID,Label,ItemType,Position)) + drop(goLocation(UnrealID)).
	forall percept(item(UnrealID,Label,ItemType,Position)) do insert(item(UnrealID,Label,ItemType,Position)).
	
	% Update the other bots the bot sees.
	forall percept(not(bot(UnrealID,Name,Team,Position,Weapon,Firemode))) do delete(bot(UnrealID,Name,Team,Position,Weapon,Firemode)).
	forall percept(bot(UnrealID,Name,Team,Position,Weapon,Firemode)) do insert(bot(UnrealID,Name,Team,Position,Weapon,Firemode)).
	
	% Update the pickups the bot sees.
	forall percept(not(pickup(UnrealID))) do delete(pickup(UnrealID)).
	forall percept(pickup(UnrealID)) do insert(pickup(UnrealID)).

	% The bot will adopt being at all places that are in radius of the flagbase.
	forall bel(inRadius(UnrealID)),not(a-goal(goLocation(UnrealID))) 
		do adopt(goLocation(UnrealID)).
	
	% If the flag is back at the base the goLocationFlag goal is dropped
	forall a-goal(goLocationFlag(UnrealID)), bel(self(_,_,TeamColor), not(flagState(TeamColor, 'dropped')))
		do drop(goLocationFlag(UnrealID)).
	
	% If the bot sees the flag, the bot will delete all his next locations and adopt going to the location of the flag.
	if bel(self(_,_,TeamColor), flag(TeamColor, 'none', Position), flagState(TeamColor, 'dropped'))
		then adopt(goLocationFlag(Position)) + exit-module.

	% If the doesn't hold the enemy flag anymore but still has a goal to bring it home the goals would be dropped
	forall a-goal(goHomeWithFlag(UnrealID)), bel(not(holdingFlag))
		do drop(goHomeWithFlag(UnrealID)).		
	
	% If the bot holds the flag and the friendly flag is not at home then the bot will rotate around the base
	if bel(holdingFlag, self(_, _,TeamColor), not(flagState(TeamColor, 'home')))
		then exit-module.
	
	% If the bot holds the flag the bot will go home.	
	if bel(ourBaseLocation(Home), holdingFlag)
		then adopt(goHomeWithFlag(Home)) + exit-module.
		
	% If the bot believes the flag is not held and has a goal of going to a helpLocation the bot will drop the goal
	forall a-goal(goLocationHelp(Position, UnrealID)), bel(self(_,_,TeamColor), not( flagState(TeamColor, 'held')))
		do drop(goLocationHelp(Position, UnrealID)).
	
	% If the bot gets location of helpDef the bot will insert that location.
	if bel(self(_,_,TeamColor), flag(TeamColor, HolderID, Position), flagState(TeamColor, 'held'), 
		navigation(navigating, UnrealID), Position \= UnrealID)		
		then stop + adopt(goLocationHelp(Position, HolderID)) + exit-module.
	
	% If the bot gets location of helpDef the bot will insert that location.
	if bel(self(_,_,TeamColor), flag(TeamColor, HolderID, Position), flagState(TeamColor, 'held'))
		then adopt(goLocationHelp(Position, HolderID)) + exit-module.
	
	% If has a goal of grabbing the enemy flag at that location and the flag is not at that location the bot will drop the goal
	forall a-goal(goLocationFlagEnemy(Position)), bel(self(_,_,TeamColor), not(flag(NotTeamColor, 'none', Position)), TeamColor \= NotTeamColor)
		do drop(goLocationFlagEnemy(Position)).
		
	% If the bot sees the enemyflag the bot will adopt the goal of grabbing that flag
	if bel(self(_,_,TeamColor), flag(NotTeamColor, 'none', Position), TeamColor \= NotTeamColor, navigation(navigating, UnrealID), UnrealID \= Position)
		then stop + adopt(goLocationFlagEnemy(Position)) + exit-module.
	
	% If the bot sees the enemyflag the bot will adopt the goal of grabbing that flag	
	if bel(self(_,_,TeamColor), flag(NotTeamColor, 'none', Position), TeamColor \= NotTeamColor)
		then adopt(goLocationFlagEnemy(Position)) + exit-module.
	
	% If the flag of the bot is not taken anymore the bot will drop all goRandom places.
	forall a-goal(goRandom(Position)), bel(self(_,_,TeamColor), not(flagState(TeamColor, 'held')))
		do drop(goRandom(Position)).
		
	
	if bel(atkRad(UnrealID), navigation(navigating, UnrealID), not(flagState(TeamColor, 'held')))
		then stop + exit-module.
		
	forall a-goal(goLocation(UnrealID)), bel(atkRad(Position), self(_,_,TeamColor), not(flag(TeamColor, _, _)), flagState(TeamColor, 'held')) 
		do drop(goLocation(UnrealID)) + adopt(goRandom(Position)) + exit-module.
			
	forall a-goal(goLocationKill(Position, UnrealID)), bel(not(enemyBot(UnrealID, Position)))
		do drop(goLocationKill(Position, UnrealID)).
		
	if bel(enemyBot(UnrealID, Position), navigation(navigating, Position2), Position \= Position2) 
		then stop + all.send(helpDef(Position, UnrealID)) +  adopt(goLocationKill(Position, UnrealID)) + exit-module.
	
	if bel(enemyBot(UnrealID, Position)) 
		then all.send(helpDef(Position, UnrealID)) +  adopt(goLocationKill(Position, UnrealID)) + exit-module.

}