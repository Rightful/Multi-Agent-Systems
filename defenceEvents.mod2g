use UTbot as knowledge.
use Action as actionspec.
order = linearall.

module defenceEvents {
	
	% Belief base cleaning.
	forall bel(lookingAt(Target)) do delete(lookingAt(Target)).
	 	
	% Updating where to look.
	if bel(not(enemyBot(_, _)), timeForUpdate, lookAt(LOC, X), viewAngle(Y), lastAngleUpdater(LastAngle), get_time(Current)) 
		then look([nearestEnemy,LOC]) + delete(lastAngleUpdater(LastAngle)) + insert(lastAngleUpdater(Current)) + delete(viewAngle(Y)) + insert(viewAngle(X)).
	
	% if we're shot at but dont see anyone, look at where you came from
	if percept(status(NewHealth,_)), bel(status(OldHealth,_), NewHealth < OldHealth, not(enemyBot(_,_)), ownLocation(A,B,C))  then look(location(A,B,C)).
	
	% If bot sees enemy bot.
	if bel(enemyBot(_, LOC)) then look(LOC).
	%if bel(enemyBot(_,Position), not(holdingFlag)) then navigate(Position).
	
	% keep track of own location.
	if bel(ownLocation(OldX,OldY,OldZ)),percept(orientation(location(X,Y,Z),_,_)) then delete(ownLocation(OldX,OldY,OldZ))+insert(ownLocation(X,Y,Z)).
	
	% Update the orientation of the bot
	forall bel(orientation(location(X,Y,Z),OldRot,OldVel), prevLocation(X1,Y1,Z1)), percept(orientation(Loc,Rot,Vel)) do
		delete(prevLocation(X1,Y1,Z1)) + insert(prevLocation(X,Y,Z)) + delete(orientation(location(X,Y,Z),OldRot,OldVel)) + insert(orientation(Loc,Rot,Vel)).
		
	% Update the bot's status
	forall bel(status(OldHp,OldArm)), percept(status(Hp,Arm,_,_)) do
		delete(status(OldHp,OldArm)) + insert(status(Hp,Arm)).
		
	% Update the bot's current weapon
	forall bel(currentWeapon(OldWeap,OldFMode)), percept(currentWeapon(Weap,FMode)) do
		delete(currentWeapon(OldWeap,OldFMode)) + insert(currentWeapon(Weap,FMode)).
		
	% Update the bot's inventory
	if percept(not(weapon(WeapType,Ammo,AltAmmo))), bel(weapon(WeapType,Ammo,AltAmmo)) then delete(weapon(WeapType,Ammo,AltAmmo)).
	if percept(weapon(WeapType,Ammo,AltAmmo)) then insert(weapon(WeapType,Ammo,AltAmmo)).
		
	% Update the bot's current powerup
	forall bel(powerup(OldType,OldDur)), percept(powerup(Type,Dur)) do
		delete(powerup(OldType,OldDur)) + insert(powerup(Type,Dur)).
		
	% Update the bot's current armor
	forall bel(armor(OldHelm,OldVest,OldPads,OldBelt)), percept(armor(Helm,Vest,Pads,Belt)) do
		delete(armor(OldHelm,OldVest,OldPads,OldBelt)) + insert(armor(Helm,Vest,Pads,Belt)).
		
	% Store all kills made in the match
	forall percept(fragged(Time,KillerID,VictimID,WeapType)) do insert(fragged(Time,KillerID,VictimID,WeapType)).
	
	% Update the navigation state of the bot ('send on change' percept).
	forall bel(navigation(OldStatus,OldDest)), percept(navigation(Status,Destination))do 
		delete(navigation(OldStatus,OldDest)) + insert(navigation(Status,Destination)).
		
	%Update Flag stuff.
	forall bel(flag(Team , HolderID , Position)),  percept(not(flag(Team , HolderID , Position)))
		do delete(flag(Team , HolderID , Position)).
		
	forall percept(flag(Team , HolderID , Position)) do insert(flag(Team , HolderID , Position)).


	forall bel(flagState(Team, Status)),  percept(not(flagState(Team, Status)))
		do delete(flagState(Team, Status)).
		
	forall percept(flagState(Team, Status)) do insert(flagState(Team, Status)).

	% Handle the path percept from the path action
	forall percept(path(StartID,EndID,Len,Loc)) do insert(path(StartID,EndID,Len,Loc)).
		
	% Update the items the bot sees and drop any getItem goals associated with them.
	forall percept(not(item(UnrealID,Label,ItemType,Position))) do delete(item(UnrealID,Label,ItemType,Position)) + drop(goLocation(UnrealID)).
	forall percept(item(UnrealID,Label,ItemType,Position)) do insert(item(UnrealID,Label,ItemType,Position)).
	
	% Update the other bots the bot sees.
	forall percept(not(bot(UnrealID,Name,Team,Position,Weapon,Firemode))) do delete(bot(UnrealID,Name,Team,Position,Weapon,Firemode)).
	forall percept(bot(UnrealID,Name,Team,Position,Weapon,Firemode)) do insert(bot(UnrealID,Name,Team,Position,Weapon,Firemode)).
	
	% Update the pickups the bot sees.
	forall percept(not(pickup(UnrealID))) do delete(pickup(UnrealID)).
	forall percept(pickup(UnrealID)) do insert(pickup(UnrealID)).

		% ------------ Goal Management -------------
		% if you have been fragged then delete all (at +  fraggedBot) goals.
		forall a-goal(at(A)), bel(self(Victim,_,_), fragged(_,_,Victim,_)) do drop(at(A)). 
		forall a-goal(fraggedBot(A)), bel(self(Victim,_,_), fragged(_,_,Victim,_)) do drop(fraggedBot(A)).

		% if you do not see a bot anymore stop hunting him
	 	forall a-goal(fraggedBot(ID)), bel(not(bot(ID,_,_,_,_,_))) do drop(fraggedBot(ID)).
	 	
	 	% if you see an opponent bot then adopt to kill that bot.
	 	forall bel(bot(UnrealID,_,Team,_,_,_), self(_,_,Team2), Team \= Team2) do adopt(fraggedBot(UnrealID)).
	 	
		% handle fragged percept (After line above!!).
		forall bel(fragged(Time, KillerID, VictimID, WeaponType)) do delete(fragged(Time, KillerID, VictimID, WeaponType)).
		
	 	% if you are holding the flag adopt to go to own base.
	 	if bel(flag(Team,Player,_), self(Player,_,Team2), ourBaseLocation(UnrealID), not(Team=Team2)) then adopt(at(UnrealID)). 
	 	
	 	% if stuck then find somewhere else to go to.
		if bel(navigation('stuck', Location), base(Team, UnrealID), self(_,_,Team2), Team \= Team2) , a-goal(at(Location)) then drop(at(Location)) + adopt(at(UnrealID)).
		% if no path then ...
		if a-goal(at(ID)), bel(navigation('noPath',ID)) then drop(at(ID)).
		if bel(navigation('noPath',ID)), not(a-goal(at(ID))) then stop.

		% secondary for shock rifle if an enemy bot is closeby, else primary
		if bel(not(enemyBot(_,_))) then prefer([weapon(shock_rifle,primary),weapon(flak_cannon,primary),weapon(link_gun,primary),weapon(stinger_minigun,primary),weapon(sniper_rifle,primary),weapon(enforcer,primary),weapon(impact_hammer,primary)]).
		if bel(enemyBot(_,location(X,Y,_)), ownLocation(A,B,_), A>X+500, A<X-500, B>Y+500, B<Y-500) then prefer([weapon(shock_rifle,primary),weapon(flak_cannon,primary),weapon(link_gun,primary),weapon(stinger_minigun,primary),weapon(sniper_rifle,primary),weapon(enforcer,primary),weapon(impact_hammer,primary)]).
		if bel(bot(_,_,_,location(X,Y,_),_,_), ownLocation(A,B,_), A<X+500, A>X-500, B<Y+500, B>Y-500) then prefer([weapon(shock_rifle,secondary),weapon(flak_cannon,primary),weapon(link_gun,primary),weapon(stinger_minigun,primary),weapon(sniper_rifle,primary),weapon(enforcer,primary),weapon(impact_hammer,primary)]).

}