use UTbot as knowledge.
use Action as actionspec.
order = linearall.

module defenceEvents {
	
	% Belief base cleaning.
	forall bel(lookingAt(Target)) do delete(lookingAt(Target)).
	 	
	% Updating where to look.
	%ERUIT
	if bel(not(enemyBot(_, _)), timeForUpdate, lookAt(LOC, X), viewAngle(Y), lastAngleUpdater(LastAngle), get_time(Current)) 
		then look([nearestEnemy,LOC]) + delete(lastAngleUpdater(LastAngle)) + insert(lastAngleUpdater(Current)) + delete(viewAngle(Y)) + insert(viewAngle(X)).
	
	% If bot sees enemy bot.
	if bel(enemyBot(_, LOC)) then look(LOC).
	
	%if we're shot at but dont see anyone and you're not holding a flag, look at where you came from
	if percept(status(NewHealth,_),status(OldHealth,_), NewHealth < OldHealth, not(enemyBot(_,_)), ownLocation(A,B,C))  then look(location(A,B,C)).

	% keep track of own location.
	if bel(ownLocation(OldX,OldY,OldZ)),percept(orientation(location(X,Y,Z),_,_)) then delete(ownLocation(OldX,OldY,OldZ))+insert(ownLocation(X,Y,Z)).
		
	% Update the navigation state of the bot ('send on change' percept).
	forall bel(navigation(OldStatus,OldDest)), percept(navigation(Status,Destination))do 
		delete(navigation(OldStatus,OldDest)) + insert(navigation(Status,Destination)).
	
	% Update the bot's status
	forall bel(status(OldHp,OldArm)), percept(status(Hp,Arm,_,_)) do
		delete(status(OldHp,OldArm)) + insert(status(Hp,Arm)).
		
	% Update the bot's current weapon
	forall bel(currentWeapon(OldWeap,OldFMode)), percept(currentWeapon(Weap,FMode)) do
		delete(currentWeapon(OldWeap,OldFMode)) + insert(currentWeapon(Weap,FMode)).
		
	% Update the bot's inventory
	if percept(not(weapon(WeapType,Ammo,AltAmmo))), bel(weapon(WeapType,Ammo,AltAmmo)) then delete(weapon(WeapType,Ammo,AltAmmo)).
	if percept(weapon(WeapType,Ammo,AltAmmo)) then insert(weapon(WeapType,Ammo,AltAmmo)).
		
	% Update the bot's current powerup
	forall bel(powerup(OldType,OldDur)), percept(powerup(Type,Dur)) do
		delete(powerup(OldType,OldDur)) + insert(powerup(Type,Dur)).
		
	% Update the bot's current armor
	forall bel(armor(OldHelm,OldVest,OldPads,OldBelt)), percept(armor(Helm,Vest,Pads,Belt)) do
		delete(armor(OldHelm,OldVest,OldPads,OldBelt)) + insert(armor(Helm,Vest,Pads,Belt)).
		
	% Store all kills made in the match
	forall percept(fragged(Time,KillerID,VictimID,WeapType)) do insert(fragged(Time,KillerID,VictimID,WeapType)).

	% Updates the state of the flag.
	forall percept(not(flagState(Team,FlagState))) do delete(flagState(Team,FlagState)).
	forall percept(flagState(Team,FlagState)) do insert(flagState(Team,FlagState)).
	
	% Update Flag stuff.
	forall percept(not(flag(Team , HolderID , Position))) do delete(flag(Team , HolderID , Position)).
	forall percept(flag(Team , HolderID , Position)), bel(flag(Team,HolderUnrealID,Position)) do insert(flag(Team , HolderID , Position)).	
	
	% Update the items the bot sees and drop any getItem goals associated with them.
	forall percept(not(item(UnrealID,Label,ItemType,Position))) do delete(item(UnrealID,Label,ItemType,Position)).
	forall percept(item(UnrealID,Label,ItemType,Position)) do insert(item(UnrealID,Label,ItemType,Position)).
	
	% Update the other bots the bot sees.
	forall percept(not(bot(UnrealID,Name,Team,Position,Weapon,Firemode))) do delete(bot(UnrealID,Name,Team,Position,Weapon,Firemode)).
	forall percept(bot(UnrealID,Name,Team,Position,Weapon,Firemode)) do insert(bot(UnrealID,Name,Team,Position,Weapon,Firemode)).
	
	% Update the pickups the bot sees.
	forall percept(not(pickup(UnrealID))) do delete(pickup(UnrealID)).
	forall percept(pickup(UnrealID)) do insert(pickup(UnrealID)).


	forall a-goal(fraggedBot(ID)), bel(self(Victim,_,_), fragged(_,_,Victim,_)) do drop(fraggedBot(ID)).
		
	% handle fragged percept (After line above!!).
	forall bel(fragged(Time, KillerID, VictimID, WeaponType)) do delete(fragged(Time, KillerID, VictimID, WeaponType)).
	
	% if you see an opponent bot then adopt to kill that bot.
	forall bel(enemyBot(ID,_)) do adopt(fraggedBot(ID)).
	 	
	% The bot will adopt being at all places that are in radius of the flagbase.
	forall bel(inRadius(ID)),not(a-goal(goLocation(ID))) do adopt(goLocation(ID)).
	
	% If the flag is back at the base the goLocationFlag goal is dropped
	forall a-goal(goLocationFlag(ID)), bel(self(_,_,TeamColor), not(flagState(TeamColor, 'dropped'))) do drop(goLocationFlag(ID)).
	
	% If the bot sees the flag, the bot will delete all his next locations and adopt going to the location of the flag.
	if bel(self(_,_,TeamColor), flag(TeamColor, none, Position), flagState(TeamColor, 'dropped')) then adopt(goLocationFlag(Position)) + exit-module.

	% If the doesn't hold the enemy flag anymore but still has a goal to bring it home the goals would be dropped
	forall a-goal(goHomeWithFlag(ID)), bel(not(holdingFlag)) do drop(goHomeWithFlag(ID)).		
	
	% If the bot holds the flag and the friendly flag is not at home then the bot will rotate around the base
	if bel(holdingFlag, self(_, _,TeamColor), not(flagState(TeamColor, 'home'))) then exit-module.
	
	% If the bot holds the flag the bot will go home.	
	if bel(ourBaseLocation(Home), holdingFlag) then adopt(goHomeWithFlag(Home)) + exit-module.
		
	% If the bot believes the flag is not held and has a goal of going to a helpLocation the bot will drop the goal
	forall a-goal(goLocationHelp(Position, ID)), bel(self(_,_,TeamColor), not( flagState(TeamColor, 'held'))) do drop(goLocationHelp(Position, ID)).
	
	% If the bot gets location of helpDef the bot will insert that location.
	if bel(self(_,_,TeamColor), flag(TeamColor, HolderID, Position), flagState(TeamColor, 'held'), navigation(navigating, ID), Position \= ID)		
		then stop + adopt(goLocationHelp(Position, HolderID)) + exit-module.
	
	% If the bot gets location of helpDef the bot will insert that location.
	if bel(self(_,_,TeamColor), flag(TeamColor, HolderID, Position), flagState(TeamColor, 'held')) then adopt(goLocationHelp(Position, HolderID)) + exit-module.
	
	% If has a goal of grabbing the enemy flag at that location and the flag is not at that location the bot will drop the goal
	forall a-goal(goLocationFlagEnemy(Position)), bel(self(_,_,TeamColor), not(flag(NotTeamColor, none, Position)), TeamColor \= NotTeamColor)
		do drop(goLocationFlagEnemy(Position)).
		
	% If the bot sees the enemyflag the bot will adopt the goal of grabbing that flag
	if bel(self(_,_,TeamColor), flag(NotTeamColor, none, Position), TeamColor \= NotTeamColor, navigation(navigating, ID), ID \= Position)
		then stop + adopt(goLocationFlagEnemy(Position)) + exit-module.
	
	% If the bot sees the enemyflag the bot will adopt the goal of grabbing that flag	
	if bel(self(_,_,TeamColor), flag(NotTeamColor, none, Position), TeamColor \= NotTeamColor)
		then adopt(goLocationFlagEnemy(Position)) + exit-module.
	
	% If the flag of the bot is not taken anymore the bot will drop all goRandom places.
	forall a-goal(goRandom(Position)), bel(self(_,_,TeamColor), not(flagState(TeamColor, 'held')))
		do drop(goRandom(Position)).
		
	if bel(atkRad(ID), navigation(navigating, ID), not(flagState(TeamColor, 'held')))
		then stop + exit-module.
		
	forall a-goal(goLocation(ID)), bel(atkRad(Position), self(_,_,TeamColor), not(flag(TeamColor, _, _)), flagState(TeamColor, 'held')) 
		do drop(goLocation(ID)) + adopt(goRandom(Position)) + exit-module.
			
	forall a-goal(goLocationKill(Position)), bel(self(_,_,TeamColor), not( enemyBot(UnrealID, P)))
		do drop(goLocationKill(Position)).
		
	if bel(self(_, _, Color), base(Color, FriendlyBase), base(Color2, EnemyBase), enemyBot(UnrealID, Position), not(holdingFlag), Color \= Color2) 
		then path(Position, FriendlyBase) + insert(following(UnrealID, FriendlyBase)).
		
	if (_).sent:(escorting), bel(self(_, _, Color), navigation(navigating, Location), following(UnrealID,  FriendlyBase),enemyBot(UnrealID, P), atkRad(Location)), percept(path(Position, FriendlyBase, _, [H1|[H2|[H | T]]])) 
		then stop +  adopt(goLocationKill(H)) + delete(following(UnrealID,  FriendlyBase))+ exit-module.
		
	if bel(self(_, _, Color), following(UnrealID,  FriendlyBase),enemyBot(UnrealID, P)), percept(path(Position, FriendlyBase, _, [H1|[H2|[H | T]]])) 
		then adopt(goLocationKill(H)) + delete(following(UnrealID,  FriendlyBase))+ exit-module.
		
		
	
	% secondary for shock rifle if an enemy bot is closeby, else primary
	if bel(not(enemyBot(_,_))) then prefer([weapon(shock_rifle,primary),weapon(flak_cannon,primary),weapon(link_gun,primary),weapon(stinger_minigun,primary),weapon(sniper_rifle,primary),weapon(enforcer,primary),weapon(impact_hammer,primary)]).
	if bel(enemyBot(_,location(X,Y,_)), ownLocation(A,B,_), A>X+500, A<X-500, B>Y+500, B<Y-500) then prefer([weapon(shock_rifle,primary),weapon(flak_cannon,primary),weapon(link_gun,primary),weapon(stinger_minigun,primary),weapon(sniper_rifle,primary),weapon(enforcer,primary),weapon(impact_hammer,primary)]).
	if bel(bot(_,_,_,location(X,Y,_),_,_), ownLocation(A,B,_), A<X+500, A>X-500, B<Y+500, B>Y-500) then prefer([weapon(shock_rifle,secondary),weapon(flak_cannon,primary),weapon(link_gun,primary),weapon(stinger_minigun,primary),weapon(sniper_rifle,primary),weapon(enforcer,primary),weapon(impact_hammer,primary)]).

}