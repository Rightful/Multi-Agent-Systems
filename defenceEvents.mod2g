use UTbot as knowledge.
use Action as actionspec.
order = linearall.

module defenceEvents {
	
	% Belief base cleaning.
	forall bel(lookingAt(Target)) do delete(lookingAt(Target)).
	 	
	% Updating where to look.
	if bel(not(enemyBot(_, _)), timeForUpdate, lookAt(LOC, X), viewAngle(Y), lastAngleUpdater(LastAngle), get_time(Current)) 
		then look([nearestEnemy,LOC]) + delete(lastAngleUpdater(LastAngle)) + insert(lastAngleUpdater(Current)) + delete(viewAngle(Y)) + insert(viewAngle(X)).
	
	% if we're shot at but dont see anyone, look at where you came from
	if percept(status(NewHealth,_)), bel(status(OldHealth,_), NewHealth < OldHealth, not(enemyBot(_,_)), ownLocation(A,B,C))  then look(location(A,B,C)).
	
	% If bot sees enemy bot.
	if bel(enemyBot(_, LOC)) then look(LOC).	
	
	% keep track of own location.
	if bel(ownLocation(OldX,OldY,OldZ)),percept(orientation(location(X,Y,Z),_,_)) then delete(ownLocation(OldX,OldY,OldZ))+insert(ownLocation(X,Y,Z)).
	
	% Update the orientation of the bot
	forall bel(orientation(location(X,Y,Z),OldRot,OldVel), prevLocation(X1,Y1,Z1)), percept(orientation(Loc,Rot,Vel)) do
		delete(prevLocation(X1,Y1,Z1)) + insert(prevLocation(X,Y,Z)) + delete(orientation(location(X,Y,Z),OldRot,OldVel)) + insert(orientation(Loc,Rot,Vel)).
		
	% Update the bot's status
	forall bel(status(OldHp,OldArm)), percept(status(Hp,Arm,_,_)) do
		delete(status(OldHp,OldArm)) + insert(status(Hp,Arm)).
		
	% Update the bot's current weapon
	forall bel(currentWeapon(OldWeap,OldFMode)), percept(currentWeapon(Weap,FMode)) do
		delete(currentWeapon(OldWeap,OldFMode)) + insert(currentWeapon(Weap,FMode)).
		
	% Update the bot's inventory
	if percept(not(weapon(WeapType,Ammo,AltAmmo))), bel(weapon(WeapType,Ammo,AltAmmo)) then delete(weapon(WeapType,Ammo,AltAmmo)).
	if percept(weapon(WeapType,Ammo,AltAmmo)) then insert(weapon(WeapType,Ammo,AltAmmo)).
		
	% Update the bot's current powerup
	forall bel(powerup(OldType,OldDur)), percept(powerup(Type,Dur)) do
		delete(powerup(OldType,OldDur)) + insert(powerup(Type,Dur)).
		
	% Update the bot's current armor
	forall bel(armor(OldHelm,OldVest,OldPads,OldBelt)), percept(armor(Helm,Vest,Pads,Belt)) do
		delete(armor(OldHelm,OldVest,OldPads,OldBelt)) + insert(armor(Helm,Vest,Pads,Belt)).
		
	% Store all kills made in the match
	forall percept(fragged(Time,KillerID,VictimID,WeapType)) do insert(fragged(Time,KillerID,VictimID,WeapType)).
	
	% Update the navigation state of the bot ('send on change' percept).
	forall bel(navigation(OldStatus,OldDest)), percept(navigation(Status,Destination))do 
		delete(navigation(OldStatus,OldDest)) + insert(navigation(Status,Destination)).
		
	%Update Flag stuff.
	if percept(flag(Team , HolderID , Position)),  bel(flag(Team , OldHolderID , OldPosition)) then
		delete(flag(Team , OldHolderID , OldPosition))+insert(flag(Team , HolderID , Position)).
	if percept(flag(Team , HolderID , Position)) then insert(flag(Team , HolderID , Position)).

	% Handle the path percept from the path action
	forall percept(path(StartID,EndID,Len,Loc)) do insert(path(StartID,EndID,Len,Loc)).
		
	% Update the items the bot sees and drop any getItem goals associated with them.
	forall percept(not(item(UnrealID,Label,ItemType,Position))) do delete(item(UnrealID,Label,ItemType,Position)) + drop(goLocation(UnrealID)).
	forall percept(item(UnrealID,Label,ItemType,Position)) do insert(item(UnrealID,Label,ItemType,Position)).
	
	% Update the other bots the bot sees.
	forall percept(not(bot(UnrealID,Name,Team,Position,Weapon,Firemode))) do delete(bot(UnrealID,Name,Team,Position,Weapon,Firemode)).
	forall percept(bot(UnrealID,Name,Team,Position,Weapon,Firemode)) do insert(bot(UnrealID,Name,Team,Position,Weapon,Firemode)).
	
	% Update the pickups the bot sees.
	forall percept(not(pickup(UnrealID))) do delete(pickup(UnrealID)).
	forall percept(pickup(UnrealID)) do insert(pickup(UnrealID)).
	
	% Update the slowVolumes the bot sees.
	forall percept(not(slowVolume([UnrealID]))) do delete(slowVolume([UnrealID])).
	forall percept(slowVolume([UnrealID])) do insert(slowVolume([UnrealID])).
	
	%++++++++++++++++++++++++++++++++PICKUPS++++++++++++++++++++++++%
	% For now only in defender! Maybe attacker too, somewhere..
	if bel(pickup(UnrealID,'other',O), not(O=invisibility), not(O=jump_boots), not(O=berserk), item(_,_,_,UnrealID), not(navigation(reached,UnrealID))) then stop + navigate(UnrealID).
	
	% pickup shieldbelt
	if bel(armor(_, _, _, ShieldBelt), ShieldBelt < 100, pickup(UnrealID,_,'armor_shield_belt'),item(_,_,_,UnrealID), not(navigation(reached,UnrealID))) then stop + navigate(UnrealID).
		
	% pickup helmet
	if bel(armor(Helmet, _, _, _), pickup(UnrealID,_,'armor_helmet'),item(_,_,_,UnrealID), Helmet < 20, not(navigation(reached,UnrealID))) then stop + navigate(UnrealID).
	
	% pickup thighpad
	if bel(armor(_, _, Thighpad, _), Thighpad < 30, pickup(UnrealID,_,'armor_thighpads'), item(_,_,_,UnrealID), not(navigation(reached,UnrealID))) then stop + navigate(UnrealID).
		
	% pickup vest
	if bel(armor(_, Vest, _, _), pickup(UnrealID,_,'armor_vest'),item(_,_,_,UnrealID), Vest < 50, not(navigation(reached,UnrealID))) then stop + navigate(UnrealID).
		
	% pickup health
	if bel(pickup(UnrealID,'health',_), item(_,_,_,UnrealID), status(Health, _), Health=<70, not(navigation(reached,UnrealID))) then stop + navigate(UnrealID).
	%++++++++++++++++++++++++++++++++PICKUPS++++++++++++++++++++++++%

	% if you have been fragged then delete all (at +  fraggedBot) goals.
	forall a-goal(fraggedBot(A,location(X,Y,Z))), bel(self(Victim,_,_), fragged(_,_,Victim,_)) do drop(fraggedBot(A,location(X,Y,Z))).
	forall a-goal(fraggedBot(A,location(X,Y,Z))), bel(not(enemyBot(A,_))) do drop(fraggedBot(A,location(X,Y,Z))).

	%% TEST: new def PickupSystem	
	% pickup helmet
	if bel(armor(Helmet, _, _, _), pickup(UnrealID,_,'armor_helmet'),item(_,_,_,UnrealID), Helmet < 20, not(navigation(reached,UnrealID))) then adopt(pu(UnrealID)) + exit-module.
	
	% pickup thighpad
	if bel(armor(_, _, Thighpad, _), Thighpad < 30, pickup(UnrealID,_,'armor_thighpads'), item(_,_,_,UnrealID), not(navigation(reached,UnrealID))) then adopt(pu(UnrealID))+ exit-module.
	
	% pickup vest
	if bel(armor(_, Vest, _, _), pickup(UnrealID,_,'armor_vest'),item(_,_,_,UnrealID), Vest < 50, not(navigation(reached,UnrealID))) then adopt(pu(UnrealID))+ exit-module.
	
	% pickup health
	if bel(pickup(UnrealID,'health',_), item(_,_,_,UnrealID), status(Health, _), Health=<500, not(navigation(reached,UnrealID))) then adopt(pu(UnrealID))+ exit-module.
	
	% pickup shieldbelt
	if bel(armor(_, _, _, ShieldBelt), ShieldBelt < 100, pickup(UnrealID,_,'armor_shield_belt'),item(_,_,_,UnrealID), not(navigation(reached,UnrealID))) then adopt(pu(UnrealID))+ exit-module.
		
	
		
			
		
	% if you see an opponent bot then adopt to kill that bot.
	 forall bel(enemyBot(UnrealID,location(X,Y,Z))) do adopt(fraggedBot(UnrealID,location(X,Y,Z))).
	 
	% The bot will adopt being at all places that are in radius of the flagbase.
	forall bel(inRadius(UnrealID)),not(a-goal(goLocation(UnrealID))) do adopt(goLocation(UnrealID)).

	% If the bot sees the flag, the bot will delete all his next locations and adopt going to the location of the flag.
	forall a-goal(goLocation(UnrealID)), bel(self(_,_,TeamColor), flag(TeamColor, none, Position), flagState(TeamColor, 'dropped'))
		do drop(goLocation(UnrealID))+ adopt(goLocationFlag(Position)).
	
	% If the flag is back at the base the goLocationFlag goal is dropped
	forall a-goal(goLocationFlag(UnrealID)), bel(self(_,_,TeamColor), flagState(TeamColor, 'home'))do drop(goLocationFlag(UnrealID)).
	
	% If the bot sees the enemybot that holds the flag, the bot will send all bots the coordinations of the bots.
	if bel(self(_,_,TeamColor), flag(TeamColor, HolderID, Position), flagState(TeamColor, 'held')) 
		then all.send!(helpDef(Position, HolderID)).
	
	forall bel(atkRad(UnrealID), self(_,_,TeamColor), not(flag(TeamColor, _, _)), flagState(TeamColor, 'held')) 
		do adopt(goRandom(UnrealID)).
	
	% If the bot gets location of helpDef the bot will insert that location.
	if (_).sent!(helpDef(Position, HolderID))then insert(helpDef(Position, HolderID)).
	
	if bel(atkRad(UnrealID), navigation(navigating, UnrealID), not(flagState(TeamColor, 'held')))
		then stop.
	
	% If the believes gets a help defence location and has other places to go the bot will go first to the helpDef location
	forall a-goal(goLocation(UnrealID)), bel(helpDef(Position, HolderID))
		do drop(goLocation(UnrealID))+ adopt(goLocationHelp(Position)) +delete(helpDef(Position, HolderID)). 
	forall a-goal(goRandom(UnrealID)), bel(helpDef(Position, HolderID))
		do drop(goRandom(UnrealID))+ adopt(goLocationHelp(Position)) +delete(helpDef(Position, HolderID)). 
	
	% If the bot already is fragged than the help goLocationHelp goal is dropped
	forall a-goal(goLocationHelp(Position)), bel(helpDef(Position, HolderID), fragged(_, _, HolderID, _)) 
		do drop(goLocationHelp(Position)).
	forall a-goal(goRandom(Position)), bel(helpDef(Position, HolderID), fragged(_, _, HolderID, _)) 
		do drop(goRandom(Position)).

	% If the bot sees the enemy flag the bot will pick up the enemy flag
	forall a-goal(goLocation(UnrealID)), bel(self(_,_,TeamColor), flag(NotTeamColor, none, Position), flagState(NotTeamColor, _), TeamColor \= NotTeamColor)
		do drop(goLocation(UnrealID)) + adopt(goLocationFlagEnemy(Position)).
	forall a-goal(goRandom(UnrealID)), bel(self(_,_,TeamColor), flag(NotTeamColor, none, Position), flagState(NotTeamColor, _), TeamColor \= NotTeamColor)
		do drop(goRandom(UnrealID)) + adopt(goLocationFlagEnemy(Position)).
	
	% If the bot holds the flag and the FriendlyFlag is at our base. The bot will go to the base.
	forall a-goal(goLocation(UnrealID)), bel(self(HolderID,_,TeamColor), flag(NotTeamColor, HolderID, Position),ourBaseLocation(Location), flagState(TeamColor, 'home'), TeamColor \= NotTeamColor)
		do drop(goLocation(UnrealID)) + adopt(goHomeWithFlag(Location)).
	forall a-goal(goRandom(UnrealID)), bel(self(HolderID,_,TeamColor), flag(NotTeamColor, HolderID, Position),ourBaseLocation(Location), flagState(TeamColor, 'home'), TeamColor \= NotTeamColor)
		do drop(goRandom(UnrealID)) + adopt(goHomeWithFlag(Location)).

	forall a-goal(goRandom(UnrealID)), bel(not(flagState(TeamColor, 'held')))
		do drop(goRandom(UnrealID)).
}